/********************************************************/
/*  BlackJack.java					*/
/*  A game of Solitaire BlackJack, making use of both   */
/*  "Hand" and "Deck" classes.				*/
/*  Written by:	Edward Boning				*/
/*  Date:	Mar 13, 2011				*/
/********************************************************/

import tio.*;
import java.util.*;

//Class BlackJack organizes control flow and calls to hand class
class BlackJack{
    public static void main (String[] arg){
	//initializes Hand object, declares input tracker 'c'
	Hand h = new Hand();
	char c;

	//prints a user greeting and valid inputs
	System.out.println( "Welcome to Solitaire BlackJack!" );
	System.out.println( "Inputs: (d)eal a new hand, (h)it current hand, (q)uit" );

	//while loop to execute necessary methods
	while( true ) {
		c = (char) Console.in.readChar();

		//if user hits
		if (c == 'h')
		{
		    if (h.hittable){ //if the hand can be hit
		    	h.draw(1);	//draw 1 card
		    	h.print();	//print the hand
			h.value();	//print the value of the hand
			h.check();	//check the state of the hand
		    }
		    else
			System.out.println("Cannot hit, draw a new hand with 'd'.");
		}

		//if user deals hand
		else if (c == 'd'){
		    h.deal();	//empty hand and deal 2 cards
		    h.print();  //print the hand
		    h.value();  //print the value of the hand
		    h.check();  //check the state of the hand
		//when user quits
		} else if (c == 'q')
				break;
	}
    }
}

//class Hand tracks a hand of up to five cards, with methods to draw and deal from a Deck object, translate and print a hand, and evaluate the value and state of a hand
class Hand{

    //declare variables, initialize the Deck object and hand array
    Deck d = new Deck();	
    int[] hand = new int[5];
    int[] add;
    int size, total;
    boolean hittable;
  
    public Hand(){ }

    //resets the running size of the Hand, sets array values to 0 (no card), and draws two new cards
    public void deal(){
	size = 0;
	for (int i=0; i<hand.length; i++)
	    hand[i] = 0;
	this.draw(2);
    }

    //draws the given number of cards, if they will fit in the hand size of 5. Adds the number drawn to the running size of the hand
    public void draw(int howMany){
	if (howMany <= 5-size){
	    add = d.draw(howMany);
	    for (int i=0; i<add.length; i++)
		    hand[i+size] = add[i];
	    size += howMany;
	}
	else
	    System.out.println("Your hand is too big, get a new one!");
    }

    //prints each card contained in the Hand, translating from an int value with the symbol() and face() methods
    public void print(){
	System.out.println("\nHand is: ");
	for (int i=0; i<hand.length; i++){
	    if (hand[i] > 0){
	        System.out.println(symbol(hand[i]) + face(hand[i]));		
	    }
	}
    }

    //calculates and prints the BlackJack value of the Hand
    public void value(){
	//declare variables, reset value and ace tracker
	int face, aces;
	total = aces = 0;

	//for each card in Hand
	for (int i=0; i<hand.length; i++){
	    face = hand[i]%13; //determine face value of card
	    if (hand[i] > 0){ //if card is not empty value 0
		if (face == 1) //if card is ace, set aside in aces variable
		    aces++;
		else if (face > 10 || face == 0) //if card is royal, add 10 to total
		    total += 10;
		else				//otherwise, add the face value
		    total += face;
	    }
        }
	for (int j=0; j<aces; j++){ //for each ace set aside
	    if ((21-total) >= 11) 	//if there is room to count the ace as 11 without busting, add 11 to the total
		total += 11;
	    else			//otherwise, add 1 to the total
		total++;
	}
    	System.out.println("Value of your hand: " + total);
    }

    //checks the state of the hand, modifying the "hittable" boolean appropriately
    public void check(){
	if (total < 21){  //if not bust
	    if(size < 5){	//and hand is not full
					//present options and allow hits
		System.out.println( "(d)eal a new hand, (h)it current hand, (q)uit" );
		hittable = true;
	    }
	    else {		//otherwise, hand is full and must be redealt
		System.out.println( "Hand is full: (d)eal a new hand, (q)uit" );
	        hittable = false;
	    }
	}
	else if (total == 21){ //if hand value is 21
	    if (size == 2)		//and hand size is 2
		System.out.println("--------BLACKJACK!--------"); //print blackjack message
				//not hittable, offer new deal
	    System.out.println("21! Great job! (d)eal a new hand, or (q)uit? ");
	    hittable = false;
	}
	else {			//if hand is bust
					//not hittable, print busted message and offer new deal
	    System.out.println("--------BUSTED! OOPS!--------");
	    System.out.println("(d)eal a new hand, or (q)uit?");
	    hittable = false;
	}
    }

    //translates the integer value generated by class Deck into a String that corresponds to the proper Suit
    private String symbol(int value){
	String out="";

	if (value <= 13)
	    out = "Club ";
	else if (value > 13 && value <=26)
	    out = "Diamond ";
	else if (value > 26 && value <=39)
	    out = "Heart ";
	else if (value > 39 && value <=52)
	    out = "Spade ";
	return out;
    }

    //translates the integer value generated by class Deck into a String that corresponds to the proper card face
    private String face(int value){
	String out="";

	switch(value%13){
	    case 0:
		return out.concat("King");	
	    case 1:
		return out.concat("Ace");	
	    case 12:
		return out.concat("Queen");
	    case 11:
		return out.concat("Jack");
	    default:
		return out.concat(" " + value%13);
	}
    }
}

    
/********************************************************/
/*  The Deck class is a new type that represents a deck */
/*  of cards.  It should have methods that have anything*/
/*  to do with a deck of cards.  A constructor and a    */
/*  shuffle method are provided to get you started.     */
/*  Written by: Alex Pang                               */
/*  Date:       Feb 21, 2011  				*/
/*  Modified by: Edward Boning, Mar 13, 2011            */
/********************************************************/
    
class Deck
{
    public int[]        deck;
    private int remain;   
     
        
    // -------------------
    // constructor -- Values are set 1-52, allowing for values of 0 to be empty spaces in a hand
    // -------------------
    public Deck()
    {
        deck = new int[52];
        for( int i=0; i<52; i++ )
                deck[i] = i+1;
    }   
        
    // -------------------
    // instance method
    // -------------------
    public void print()
    {
        for( int i=0; i<52; i++ )
                System.out.printf( "%3d", deck[i] );
        System.out.println();
    }
        
    // -------------------
    // instance method
    // -------------------
    public void shuffle()
    {
        int     i, j, tmp;
        int     seed;
        Random  r;
         
        System.out.print( "Enter your lucky number: " );
        seed = Console.in.readInt();
        tmp  = Console.in.readChar();// get rid of carriage return!
        r    = new Random(seed);            // initialize random # generator
        remain = 52;
        
        for(i=0; i<52; i++ )                // shuffle deck of cards
        {   
            j       = r.nextInt(52);        // randomly pick a card
            tmp     = deck[j];              // swap with i-th card
            deck[j] = deck[i];
            deck[i] = tmp;
        }
    }           

    //instance method that takes the given number n, and returns the next n cards in the deck within an int array. Place is held within the deck using the "remain" instance variable
    public int[] draw(int number)
    {   
        int[] pull = new int[number];
        
        if (remain >= number && number > 0){
            for (int i=0; i<number; i++){
                pull[i] = deck[52-remain];
                remain --;
            }
        }
        else if (remain < number && number > 0){
            System.out.println("Out of cards, shuffling a new deck.");
            this.shuffle();
            return this.draw(number);
        }
        return pull;
    }   


}
